angular.module('crmApp', ['ngRoute', 'crmFactory', 'ngTagsInput', 'ngResource', 'angularFileUpload', 'ngSanitize']);

angular.module('crmApp').config(['$routeProvider', function ($routeProvider) {

    $routeProvider
        .when('/', {
            controller: 'LeadsIndexCtrl',
            templateUrl: 'views/leads/leads-index.view.html'
        })
        .when('/leads/add', {
            controller: 'LeadsAddCtrl',
            templateUrl: 'views/leads/leads-add.view.html'
        })
        .when('/leads/:leadId', {
            controller: 'LeadsDetailsCtrl',
            templateUrl: 'views/leads/leads-details.view.html'
        })
        .when('/leads/edit/:leadId', {
            controller: 'LeadsEditCtrl',
            templateUrl: 'views/leads/leads-edit.view.html'
        })
        .when('/tasks', {
            controller: 'TasksIndexCtrl',
            templateUrl: 'views/tasks/tasks-index.view.html'
        })
        .otherwise({
            redirectTo: '/'
        });

}])
.run(['$rootScope', '$window', '$http', function($rootScope, $window, $http) {
    $rootScope.$on( "$routeChangeStart", function(event, next, current) {
        var auth = $http.get('/auth/check');

        auth
            .success(function(data, status) {
                $rootScope.login = true;
            })
            .error(function(data, status) {
                $window.location.href = "/login";
                $rootScope.login = false;
            });
    });
}]);
// common directives, not sortable
angular.module('crmApp').directive('ngEnter', function() {
    return function(scope, element, attrs) {
        element.bind("keydown keypress", function(event) {
            if(event.which === 13) {
                scope.$apply(function(){
                    scope.$eval(attrs.ngEnter);
                });

                event.preventDefault();
            }
        });
    };
});

angular.module('crmFactory', []);
// common filters, not sortable
angular.module('crmApp').filter('groupBy',
    function () {
        return function (collection, key) {
            if (collection === null) return;
            return uniqueItems(collection, key);
        };
    });
var uniqueItems = function (data, key, subkey) {
    var result = [];

    for (var i = 0; i < data.length; i++) {
        var value = data[i][key];

        /* if (subkey)
            value = value[subkey];

        if (result.indexOf(value) == -1 && value) {
            result.push(value);
        } */

    }
    return result;
};


var uniqueArrayItems = function (data, key, subkey) {
    var result = [];

    for (var i = 0; i < data.length; i++) {
        var value = data[i][key];

        if (value) {
            for (var sk in value) {
                var subarrayVal = value[sk];

                if (subkey)
                    subarrayVal = subarrayVal[subkey];

                if (result.indexOf(subarrayVal) == -1 && subarrayVal) {
                    result.push(subarrayVal);
                }
            }
        }

    }
    return result;
};

function startsWith(wordToCompare) {
    return function(element) {
        return element.indexOf(wordToCompare) === 0;
    }
}

var positionFilter = function(word) {
    return function(element) {
        var regEx = new RegExp(word, 'gi');
        return element.name.match(regEx);
    }
};

angular.module('crmApp').controller('LeadsAddCtrl', ['$scope', '$location', '$http', 'FileUploader', 'PositionsFactory',
    function ($scope, $location, $http, FileUploader, PositionsFactory) {

    $scope.title = 'Leads add form';

    // create a blank object to hold our form information
    // $scope will allow this to pass between controller and view
    $scope.formData = {};

    var positions = PositionsFactory.get();
    positions.success(function (data, status, headers, config) {
        $scope.positions = data;
    });

    $scope.$watch('formData.subtitle', function(a, b) {
        if(typeof a != "undefined" && typeof $scope.positions != "undefined") {
            $scope.positionsFiltered = $scope.positions.filter(positionFilter(a));
        } else {
            $scope.positionsFiltered = [];
        }
    });

    $scope.positionFill = function(name) {
        $scope.formData.subtitle = name;
    };

    $scope.formData.state = [];
    $scope.formData.state.code = 'new';
    $scope.formData.state.name = 'New';
    $scope.formData.owner = 'lead';


    $scope.uploadError = false;
    $scope.cvFileUploaded = function (item, response, status, headers) {

        if(response.status == 'Error!' && response.code == 500) {
            $scope.uploadError = true;
        }

        if (!$scope.formData.files) {
            $scope.formData.files = response;
        }


    }

    $scope.uploader = new FileUploader({

        url: "/file/insert",
        alias: "userfile",
        autoUpload: true,
        onSuccessItem: $scope.cvFileUploaded
    }); // file uploader

    $scope.processUpload = function () {
        console.log('Uploading file ..');
    }

    // process the form
    $scope.processForm = function () {
        $http({
            method: 'POST',
            url: '/lead/edit',
            data: $.param($scope.formData),  // pass in data as strings
            headers: {'Content-Type': 'application/x-www-form-urlencoded'}  // set the headers so angular passing info as form data (not request payload)
        })
            .success(function (data) {
                console.log(data);
                if (data.code === 200) {
                    // if successful, bind success message to message
                    $location.path('/leads/' + data.lead_id);
                    swal({
                        title: "Good Job!",
                        text: "You've successfully added lead!",
                        type: "success",
                        confirmButtonText: "Close"
                    });
                    $scope.uploadError = false;
                    $scope.message = data.message;
                }
                else {
                    swal("Error!", 'Something went wrong', "error");
                    $scope.errorName = data.errors.name;
                    //$scope.errorSuperhero = data.errors.superheroAlias;
                }
            });
    };
}
]);
angular.module('crmApp').controller('LeadsDetailsCtrl',
    ['$scope', 'leads', '$location', '$routeParams', '$http', 'FileUploader', 'UsersFactory',
        function ($scope, leads, $location, $routeParams, $http, FileUploader, UsersFactory) {


            var usersFactory = UsersFactory.get();
            usersFactory.success(function (data) {
                $scope.usersList = data;
            });

            $scope.lead = {};

            $scope.changeTaskStatus = function (task) {
                console.log(task);

                $http({
                    method: 'POST',
                    url: '/task/toggle/' + task._id,
                    data: {},
                    headers: {'Content-Type': 'application/x-www-form-urlencoded'}  // set the headers so angular passing info as form data (not request payload)
                })
                    .success(function (data) {
                        console.log(data);
                        if (data.code === 200) {
                            $.growl.notice({title: "Good Job!", message: "You've successfully done task!"});

                            $scope.message = data.message;

                        }
                        else {
                            swal("Error!", 'Something went wrong', "error");
                        }
                    });

            }

            $scope.test = [];

            leads.getLead(
                $routeParams.leadId,
                function (data) {
                    var regex;
                    var matches;

                    $scope.lead = data;

                    if (!$scope.lead.state.hasOwnProperty('code'))
                        $scope.lead.state = {code: 'new', name: 'New'};


                    if (data.cv) {
                        $scope.cv = true;
                    } else {
                        $scope.cv = false;
                    }

                    $scope.lead.avatar = '<span class="ion-person"></span>';

                    /*
                    if ($scope.lead.contact.social.facebook != '') {
                        regex = /facebook\..*\/([^?]+)/i;
                        matches;
                        matches = regex.exec($scope.lead.contact.social.facebook);

                        if (matches) {
                            console.log(matches);
                            $scope.lead.avatar = '<img width="70" src="http://graph.facebook.com/' + matches[1] + '/picture?type=square" />';
                        }
                    }*/

                    $scope.tags = data.tags;

                    $scope.test = $scope.lead.contact.fullName;
                },
                function (data, status) {
                    console.log(data);
                    console.log(status);
                }
            );


            /**
             *
             */

            $scope.uploadError = false;
            $scope.noteFileUploaded = function (item, response, status, headers) {
                if (!$scope.noteData.files) {
                    $scope.noteData.files = new Array();
                }

                if(response.status == 'Error!' && response.code == 500) {
                    $scope.uploadError = true;
                }
                $scope.noteData.files.push(response);
            }

            $scope.uploader = new FileUploader({

                url: "/file/insert",
                alias: "userfile",
                autoUpload: true,
                onSuccessItem: $scope.noteFileUploaded
            }); // file uploader

            $scope.noteData = {type: 'Note', updatedAt: new Date()};

            $scope.noteData.parentId = $routeParams.leadId;

            /**
             * Uploading files
             */
            $scope.processUpload = function () {
                console.log('Uploading file ..');
            }


            $scope.saveTags = function () {
                $http({
                    method: 'POST',
                    url: '/lead/save_tags',
                    data: {_id: $scope.lead._id, tags: $scope.tags},
                    headers: {'Content-Type': 'application/json'}  // set the headers so angular passing info as form data (not request payload)
                })
                    .success(function (data) {
                        console.log(data);
                        if (data.code === 200) {
                            $scope.message = data.message;
                        }
                        else {
                            swal("Error!", 'Something went wrong', "error");
                        }
                    });
            };


            // process the form
            $scope.processNote = function () {

                $http({
                    method: 'POST',
                    url: '/note/insert',
                    data: $.param($scope.noteData),  // pass in data as strings
                    headers: {'Content-Type': 'application/x-www-form-urlencoded'}  // set the headers so angular passing info as form data (not request payload)
                })
                    .success(function (data) {
                        console.log(data);
                        if (data.code === 200) {
                            $.growl.notice({title: "Good Job!", message: "You've successfully added note!"});

                            $scope.message = data.message;
                            $scope.noteData.content = '';
                            $scope.uploadError = false;
                            $scope.loadNotes();
                        }
                        else {
                            swal("Error!", 'Something went wrong', "error");
                        }
                    });
            };

            $scope.notes = [];

            $scope.loadNotes = function () {
                $http.get('/note/fetchall/' + $scope.noteData.parentId).success(function (data) {
                    $scope.notes = data;

                    console.log(data);
                });
            };

            $scope.loadNotes();

            $scope.deleteNote = function ($index) {
                swal({
                    title: "Are you sure?",
                    text: "You will not be able to recover this note!",
                    type: "warning",
                    showCancelButton: true,
                    confirmButtonColor: "#DD6B55",
                    confirmButtonText: "Yes, delete it!",
                    cancelButtonText: "No, cancel plx!",
                    closeOnConfirm: true
                }, function (isConfirm) {
                    if (isConfirm) {
                        $http.get('/note/delete/' + $index).success(function (data) {
                            console.log(data);
                            if (data.code === 200) {
                                $.growl.notice({title: "Good Job!", message: "Note has been deleted"});
                                $scope.message = data.message;
                                $scope.loadNotes();
                            }
                            else {
                                swal("Error!", 'Something went wrong', "error");
                            }
                        });
                    } else {
                    }
                });
            };


            //tasks

            $scope.taskData = {owner: 'Natalia'};

            $scope.taskData.parentId = $routeParams.leadId;
            $scope.taskData.parentType = 'Lead';
            $scope.taskData.extra = '';

            $scope.processTask = function () {
                console.log($scope.taskData);
                $http({
                    method: 'POST',
                    url: '/task/insert',
                    data: $.param($scope.taskData),  // pass in data as strings
                    headers: {'Content-Type': 'application/x-www-form-urlencoded'}  // set the headers so angular passing info as form data (not request payload)
                })
                    .success(function (data) {
                        console.log(data);
                        if (data.code === 200) {
                            $.growl.notice({title: "Good Job!", message: "You've successfully added task!"});
                            $scope.message = data.message;

                            $scope.loadTasks();
                            $scope.addNewTask = false;

                        }
                        else {
                            swal("Error!", 'Something went wrong', "error");
                        }
                    });
            };

            $scope.allStates = [];
            $scope.leadStatesNames = [];
            $scope.deleteTask = function ($index) {
                swal({
                    title: "Are you sure?",
                    text: "You will not be able to recover this task!",
                    type: "warning",
                    showCancelButton: true,
                    confirmButtonColor: "#DD6B55",
                    confirmButtonText: "Yes, delete it!",
                    cancelButtonText: "No, cancel plx!",
                    closeOnConfirm: true
                }, function (isConfirm) {
                    if (isConfirm) {
                        $http.get('/task/delete/' + $index).success(function (data) {
                            console.log(data);
                            if (data.code === 200) {
                                $.growl.notice({title: "Good Job!", message: "You've successfully added task!"});
                                $scope.message = data.message;
                                $scope.loadTasks();
                            }
                            else {
                                swal("Error!", 'Something went wrong', "error");
                            }
                        });
                    } else {
                    }
                });
            };


            $scope.tasks = [];

            $scope.loadTasks = function () {
                $http.get('/task/fetchall/' + $scope.taskData.parentId).success(function (data) {
                    $scope.tasks = data;

                    console.log($scope.tasks)
                });
            };

            $scope.loadTasks();

            $scope.addNewTask = false;
            //tasks end


            //States
            $scope.loadStates = function () {
                $http.get('/lead/states').success(function (data) {
                    $scope.allStates = data;

                    for (var key in data) {
                        var ls = data[key];
                        if (typeof $scope.leadStateNames != "undefined") {
                            if ($scope.leadStateNames.hasOwnProperty(ls.code)) {
                                $scope.leadStateNames[ls.code] = ls.name;
                            }
                        }
                    }
                });
            };

            $scope.loadStates();


            $scope.lsName = function (code) {
                console.log(code);
            }

            $scope.updateState = function () {

                for (var key in $scope.allStates) {
                    if ($scope.allStates[key].code == $scope.lead.state.code) {
                        $scope.lead.state = $scope.allStates[key];
                    }
                }

                $http({
                    method: 'POST',
                    url: '/lead/change_state',
                    data: {_id: $scope.lead._id, state: $scope.lead.state},
                    headers: {'Content-Type': 'application/json'}  // set the headers so angular passing info as form data (not request payload)
                })
                    .success(function (data) {
                        if (data.code === 200) {
                            $scope.message = data.message;

                            $.growl.notice({title: "Good Job!", message: "You've successfully updated state!"});

                        }
                        else {
                            swal("Error!", 'Something went wrong', "error");
                        }
                    });
            };

            $scope.deleteTask = function () {
                swal({
                    title: "Are you sure?",
                    text: "You will not be able to recover this lead!",
                    type: "warning",
                    showCancelButton: true,
                    confirmButtonColor: "#DD6B55",
                    confirmButtonText: "Yes, delete it!",
                    cancelButtonText: "No, cancel plx!",
                    closeOnConfirm: true
                }, function (isConfirm) {
                    if (isConfirm) {
                        $http.post('/lead/delete/' + $scope.lead._id).success(function (data) {
                            console.log(data);
                            if (data.code === 200) {
                                $.growl.notice({title: "Good Job!", message: "You've successfully removed lead"});
                                $scope.message = data.message;
                                $location.path('/');
                            }
                            else {
                                swal("Error!", 'Something went wrong', "error");
                            }
                        });
                    } else {
                    }
                });
            };


        }]);
angular.module('crmApp').controller('LeadsEditCtrl',
    ['$scope', '$location', '$http','$routeParams', 'FileUploader','leads', 'PositionsFactory', 'UsersFactory',
    function ($scope, $location, $http,$routeParams, FileUploader,leads, PositionsFactory, UsersFactory) {

    $scope.title = 'Leads edit form'
    $scope.lead = {};
    $scope.leads = {};

    var usersFactory = UsersFactory.get();
    usersFactory.success(function(data) {
        $scope.usersList = data;
    });

    var positions = PositionsFactory.get();
    positions.success(function (data, status, headers, config) {
        $scope.positions = data;
    });

    $scope.$watch('formData.subtitle', function(a, b) {
        if(typeof a != "undefined") {
            $scope.positionsFiltered = $scope.positions.filter(positionFilter(a));
        } else {
            $scope.positionsFiltered = [];
        }
    });

    $scope.positionFill = function(name) {
        $scope.formData.subtitle = name;
    };

    $scope.test = [];
    $scope.tags = [];


    leads.getLead(
        $routeParams.leadId,
        function (data) {
            $scope.lead = data;

            console.log(data);
            if (!$scope.lead.state.hasOwnProperty('code'))
                $scope.lead.state = {code: 'new', name: 'New'};

            if (data.cv) {
                $scope.cv = true;
            } else {
                $scope.cv = false;
            }

            $scope.tags = data.tags;
            $scope.test = $scope.lead.contact.lastName;

            $scope.formData = {
                fullName: $scope.lead.contact.fullName,
                email: $scope.lead.contact.email,
                phone: $scope.lead.contact.phone,
                companyName: $scope.lead.contact.companyName,
                companyPosition: $scope.lead.contact.companyPosition,
                city: $scope.lead.contact.city,
                country: $scope.lead.contact.country,
                subtitle: $scope.lead.subtitle,
                linkedin: $scope.lead.contact.social.linkedin,
                goldenline: $scope.lead.contact.social.goldenline,
                facebook: $scope.lead.contact.social.facebook,
                source: $scope.lead.source.sourceName,
                recommendedBy: $scope.lead.source.recommendedBy,
                description: $scope.lead.description,
                _id: $scope.lead._id,
                tags: $scope.tags,
                state: 'New',
                owner: $scope.lead.owner
            }


        },
        function (data, status) {
            console.log(data);
            console.log(status);
        }
    );

    // create a blank object to hold our form information
    // $scope will allow this to pass between controller and view

        $scope.uploadError = false;
        $scope.cvFileUploaded = function (item, response, status, headers) {

            if(response.status == 'Error!' && response.code == 500) {
                $scope.uploadError = true;
            }

            if (!$scope.formData.files) {
                $scope.formData.files = response;
            }


        }

    $scope.uploader = new FileUploader({

        url: "/file/insert",
        alias: "userfile",
        autoUpload: true,
        onSuccessItem: $scope.cvFileUploaded
    }); // file uploader

    $scope.processUpload = function () {
        console.log('Uploading file ..');
    }

    // process the form
    $scope.processForm = function () {
        $http({
            method: 'POST',
            url: '/lead/edit',
            data: $.param($scope.formData),  // pass in data as strings
            headers: {'Content-Type': 'application/x-www-form-urlencoded'}  // set the headers so angular passing info as form data (not request payload)
        })
            .success(function (data) {
                console.log(data);
                if (data.code === 200) {
                    // if successful, bind success message to message
                    $location.path('/leads/' + data.lead_id);
                    swal({
                        title: "Good Job!",
                        text: "You've successfully added lead!",
                        type: "success",
                        confirmButtonText: "Close"
                    });
                    $scope.uploadError = false;
                    $scope.message = data.message;
                }
                else {
                    swal("Error!", 'Something went wrong', "error");
                    $scope.message = data.message;
                    //$scope.errorSuperhero = data.errors.superheroAlias;
                }
            });
    };

    $scope.saveTags = function () {
        $http({
            method: 'POST',
            url: '/lead/save_tags',
            data: {_id: $scope.lead._id, tags: $scope.tags},
            headers: {'Content-Type': 'application/json'}  // set the headers so angular passing info as form data (not request payload)
        })
            .success(function (data) {
                console.log(data);
                if (data.code === 200) {
                    $scope.message = data.message;
                }
                else {
                    swal("Error!", 'Something went wrong', "error");
                }
            });
    };


    $scope.files = [];

    $scope.loadFile = function () {
        $http.get('/file/download/' + $scope.lead._id).success(function (data) {
            $scope.files = data;
        });
    };

    $scope.loadFile();



}
]);
angular.module('crmApp').controller('LeadsIndexCtrl', ['$scope', '$http', '$location', function ($scope, $http, $location) {

    $scope.title = 'Leads list';

    $scope.users = [];
    $scope.filteredUsers = [];
    $scope.useLeadStates = {};
    $scope.useTags = {};

    $scope.allStates = [];
    $scope.leadStateNames = [];
    $scope.pages = [];

    $scope.perPage = 10;
    $scope.currentPage = 1;
    $scope.searchQuery = '';

    $scope.statusSearch = [];
    $scope.selectedTags = [];
    $scope.toggleTagSelection = function toggleTagSelection(tag) {
        var idx = $scope.selectedTags.indexOf(tag);
        if (idx > -1) {
            $scope.selectedTags.splice(idx, 1);
        }
        else {
            $scope.selectedTags.push(tag);
        }

        $scope.loadLeads();
    };

    $scope.currentPage = 1;
    $scope.emptySearchResults = false;
    $scope.loadLeads = function () {

        $http.post('lead/index/' + $scope.currentPage + '/' + $scope.perPage, {
            q_status: $scope.statusSearch.join(','),
            q_search: $scope.searchQuery,
            q_tags: $scope.selectedTags.join(',')
        }).success(function (data) {

            console.log(data.pages);
            $scope.users = data.result;
            $scope.pages = data.pages;

            if (data.cv) {
                $scope.cv = true;
            } else {
                $scope.cv = false;
            }
            if ($scope.users.length < 1) {
                $scope.emptySearchResults = true;
            } else {
                $scope.emptySearchResults = false;
            }

            var ranges = [];

            for (var i = 0; i < $scope.pages; i++) {
                ranges.push(i + 1);
            }
            $scope.ranges = ranges;
            console.log(ranges);
            $scope.activePage = $scope.currentPage;

        });
    };

    $scope.loadLeads();

    // reste filters

    $scope.resetFilters = function () {
        var checkboxes = new Array();
        checkboxes = document.getElementsByTagName('input');

        for (var i=0; i<checkboxes.length; i++)  {
            if (checkboxes[i].type == 'checkbox')   {
                checkboxes[i].checked = false;
            }
        }

        $scope.searchQuery = '';

        $scope.statusSearch = [];
        $scope.selectedTags = [];
        $scope.loadLeads();
    };

    //pagination

    $scope.pagination = function (page, items) {
        $scope.currentPage = page;
        $scope.perPage = items;

        $scope.loadLeads();
        /*$http.post('/lead/index/' + page + '/' + items, {q_search: $scope.searchQuery}).success(function (data) {
            $scope.users = data.result;
            $scope.pages = data.pages;

            $scope.activePage = page;

        });*/
    };


    //States
    $scope.loadStates = function () {
        $http.get('/lead/states').success(function (data) {
            $scope.allStates = data;

            for (var key in data) {
                var ls = data[key];
                $scope.leadStateNames[ls.code] = ls.name;
            }
        });
    };

    $scope.loadStates();


    $scope.lsName = function (code) {
        return $scope.leadStateNames[code];
    }

    // Watch the pants that are selected
    $scope.$watch(function () {
        return {
            users: $scope.users,
            filteredUsers: $scope.filteredUsers,
            useLeadStates: $scope.useLeadStates,
            useTags: $scope.useTags,
            leadStateNames: $scope.leadStateNames
        }
    }, function (value) {
        var selected;

        $scope.count = function (prop, subprop, value) {
            return function (el) {
                if (subprop) el = el[prop];
                return el[subprop] == value;
            };
        };

        $scope.countArray = function (prop, subprop, value) {
            return function (el) {
                if (el[prop] && el[prop].length > 0) {

                    var found = false;
                    for (var t in el[prop]) {
                        var tag = el[prop][t];
                        if (tag[subprop] == value)
                            found = true;
                    }
                    return found;

                }
                return false;
            };
        };

        $scope.leadStatesGroup = uniqueItems($scope.filteredUsers, 'state', 'code');
        var filterAfterLeadStates = [];
        selected = false;
        for (var j in $scope.filteredUsers) {
            var p = $scope.filteredUsers[j];
            for (var i in $scope.useLeadStates) {
                if ($scope.useLeadStates[i]) {
                    selected = true;
                    if (i == p.state.code) {
                        filterAfterLeadStates.push(p);
                        break;
                    }
                }
            }
        }
        if (!selected) {
            filterAfterLeadStates = $scope.users;
        }

        $scope.tagsGroup = uniqueArrayItems($scope.filteredUsers, 'tags', 'text');
        var filteredAfterTags = [];
        selected = false;
        for (var j in $scope.filteredUsers) {
            var p = $scope.filteredUsers[j];
            for (var i in $scope.useTags) {
                if ($scope.useTags[i]) {

                    for (t in p.tags) {
                        var tag = p.tags[t];
                        if (tag && tag.text == i) {

                            selected = true;

                            filteredAfterTags.push(p);
                            break;
                        }
                    }
                }
            }
        }
        if (!selected) {
            filteredAfterTags = filterAfterLeadStates;
        }

        $scope.filteredUsers = filteredAfterTags;
    }, true);


    $scope.$watch('filtered', function (newValue) {
        if (angular.isArray(newValue)) {
            console.log(newValue.length);
        }
    }, true);


    $scope.listState = [];
    $scope.stateListChanged = function (code) {
        if ($scope.listState[code]) {
            $scope.statusSearch.push(code);
        } else {
            var array = [2, 5, 9];
            var index = $scope.statusSearch.indexOf(code);
            if (index > -1) {
                $scope.statusSearch.splice(index, 1);
            }
            console.log($scope.statusSearch);
        }
    };


    $scope.filters = {
        x: false,
        state: [],
        search: ''
    };

    $http.get('lead/states').success(function (data) {
        $scope.leadStates = data;
    });


    $scope.actions = {
        updateState: function () {
            //if ($scope.filters.x) {
            //    $scope.filters.state = 'New';
            //    var a = $scope.filters.state.length;
            //} else if ($scope.filters.y) {
            //    $scope.filters.state = 'Employee';
            //} else {
            //    $scope.filters.state = '';
            //}
        }
    };


    $scope.orderByColumn = '$index'
    $scope.orderByDir = false;

    $scope.changeOrder = function (columnName) {
        if ($scope.orderByColumn == columnName) {
            $scope.orderByDir = !$scope.orderByDir;
        } else {
            $scope.orderByColumn = columnName;
            $scope.orderByDir = false;
        }
    };

    $scope.isOrderedBy = function (columnName) {
        return ($scope.orderByColumn == columnName);
    };

    $scope.isOrderedReverse = function () {
        return !$scope.orderByDir;
    };


    // states

    $scope.statesLength = false;
    $scope.leadsStates = [];

    $scope.loadTags = function () {
        $http.get('/lead/states').success(function (data) {
            $scope.leadsStates = data;

            if ($scope.leadsStates.length < 1) {
                $scope.statesLength = false;
            } else {
                $scope.statesLength = true;
            }
        });
    };

    $scope.loadTags();

    //tags

    $scope.leadsTags = [];
    $scope.tagsLength = false;

    $scope.loadTags = function () {
        $http.get('/lead/tags/fetch_all').success(function (data) {
            $scope.leadsTags = data;

            if ($scope.leadsTags.length < 1) {
                $scope.tagsLength = false;
            } else {
                $scope.tagsLength = true;
            }

        });
    };

    $scope.loadTags();

}]);
angular.module('crmFactory').factory('leads', ['$http', function($http){

    var _getLead = function (leadId, success, error) {

        success = success||function(){};
        error = error||function(){};

        $http.get('lead/fetch/'+leadId)
            .success(function (data) {
                success(data);
            })
            .error(error);

    };

    return {
        getLead: _getLead
    };
}]);
angular.module('crmApp').factory('PositionsFactory', ['$http', function($http) {
    return {
        get: function() {
            return $http.get('/position');

        }
    };
}]);
angular.module('crmApp').controller('TasksIndexCtrl', ['$scope', '$http', function ($scope, $http) {

    $scope.title = 'ToDo';
    $scope.tasks = [];

    $scope.loadTasks = function () {

        $http.get('task/index').success(function (data) {
            $scope.tasks = data;
        });
    };
    $scope.loadTasks();

    $scope.orderByColumn = '$index';
    $scope.orderByDir = false;

    $scope.changeStatus = function (task) {
        console.log(task);

        $http({
            method: 'POST',
            url: '/task/toggle/' + task._id,
            data: {},
            headers: {'Content-Type': 'application/x-www-form-urlencoded'}  // set the headers so angular passing info as form data (not request payload)
        })
            .success(function (data) {
                console.log(data);
                if (data.code === 200) {
                    $.growl.notice({title: 'Good Job!', message: 'You\'ve successfully done task!'});

                    $scope.message = data.message;

                    $scope.loadTasks();
                }
                else {
                    swal('Error!', 'Something went wrong', 'error');
                }
            });

    };

    $scope.changeOrder = function (columnName) {
        if ($scope.orderByColumn == columnName) {
            $scope.orderByDir = !$scope.orderByDir;
        } else {
            $scope.orderByColumn = columnName;
            $scope.orderByDir = false;
        }
    };


}]);
angular.module('crmApp').factory('UsersFactory', ['$http', function($http) {
    return {
        get: function() {
            return $http.get('/users');

        }
    };
}]);